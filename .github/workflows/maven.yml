# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  build:

    runs-on: ubuntu-latest

    steps:

    
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.2.4
      with:
        # Artifact name
        name: verademo
        # A file, directory or wildcard pattern that describes what to upload
        path: target/*.war
      
  Veracode_SAST_Policy:
    needs: build
    environment: 'Veracode API Credentials'
    runs-on: ubuntu-latest
    
    steps:
    - name: Download verademo
      uses: actions/download-artifact@v2.0.10
      with:
        name: verademo
    
    - name: Check target folder
      run: ls
      shell: bash
        
    - name: Veracode Upload And Scan
      # You may pin to the exact commit or the version.
      # uses: veracode/veracode-uploadandscan-action@c5e63c8383debb26a0d48250eab75d94327635ba
      uses: veracode/veracode-uploadandscan-action@0.2.1

      with:
        # appname
        appname: Verademo # default is ${{ github.repository }}
        # createprofile
        createprofile: false # default is true
        # filepath
        filepath: verademo.war
        # version
        version: 'Github Workflow - ${{ github.run_id }}' # default is Scan from Github job: ${{ github.run_id }}
        # vid
        vid: ${{ secrets.VERACODE_API_ID }}
        # vkey
        vkey: ${{ secrets.VERACODE_API_KEY }}
        # true or flase
        createsandbox: # optional
        # name of the sandbox
        sandboxname: # optional
        # wait X minutes for the scan to complete
        scantimeout: 30 # optional
        # modules to exclude from module selection
        exclude: # optional
        # modules to include in module selection
        include: # optional
        # business criticality - policy selection
        criticality: # optional
        # filename pattern
        pattern: # optional
        # replacement
        replacement: # optional
        # replacement
        sandboxid: # optional
        # All top level modules
        scanallnonfataltoplevelmodules: # optional
        # platform selected modules
        selected: # optional
        # selected modules like from previous scan
        selectedpreviously: # optional
        # teams
        teams: # optional
        # teams
        toplevel: # optional
        
    Veracode_Import_Flaws:
      runs-on: ubuntu-latest
      needs: Veracode_SAST_Policy
      if: ${{ failure() }}
      
      steps:
        - name: Get Flaws
          uses: julz0815/veracode_flaw_importer
          environment: 'Veracode API Credentials'
          env: 
            VERACODE_API_KEY_ID: '${{ secrets.VERACODE_API_ID }}'
            VERACODE_API_KEY_SECRET: '${{ secrets.VERACODE_API_KEY }}'
          with:
            app_name: Verademo
            
        - name: Upload JSON SARIF result
          uses: actions/upload-artifact@master
        
          with:
            name: flaws
            path: /home/runner/work/verademo/verademo/fullResults.json

        - name: Import SARIF
          uses: github/codeql-action/upload-sarif@v1
          
          with:
            # Path to SARIF file relative to the root of the repository
            sarif_file: fullResults.json
            
#   Veracode_Get_Policy_Flaws:
#     runs-on: ubuntu-latest
#     needs: Veracode_SAST_Policy
#     if: ${{ failure() }}
#     environment: 'Veracode API Credentials'
#     container: 
#       image: veracode/api-signing:latest
#     steps:
#       # Note: this will only work up to about 500 flaws
#       #		due to Veracode results limiting
#       # See the get_flaws.sh script in the helpers directory
#       #		for a more elaborate method
#       - name: get policy flaws
#         run: |
#           cd /tmp
#           export VERACODE_API_KEY_ID=${{ secrets.VERACODE_API_ID }}
#           export VERACODE_API_KEY_SECRET=${{ secrets.VERACODE_API_KEY }}
#           guid=$(http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v1/applications?name=Verademo" | jq -r '._embedded.applications[0].guid') 
#           echo GUID: ${guid}
#           total_flaws=$(http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v2/applications/${guid}/findings?scan_type=STATIC&violates_policy=True" | jq -r '.page.total_elements')
#           echo TOTAL_FLAWS: ${total_flaws}
#           http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v2/applications/${guid}/findings?scan_type=STATIC&violates_policy=True&size=${total_flaws}" > policy_flaws.json

#       - name: save results file
#         uses: actions/upload-artifact@v2
#         with:
#           name: policy-flaws
#           path: /tmp/policy_flaws.json

#   # This step will import flaws from the step above
#   Veracode_Import_Policy_Flaws:
#     needs: Veracode_Get_Policy_Flaws
#     if: ${{ failure() }}
#     runs-on: ubuntu-latest
#     steps:
#       - name: get flaw file
#         uses: actions/download-artifact@v2
#         with:
#           name: policy-flaws
#           path: /tmp

#       - name: import flaws as issues
#         uses: buzzcode/veracode-flaws-to-issues@v1
#         with:
#           scan-results-json: '/tmp/policy_flaws.json'
#           github-token: ${{ secrets.GITHUB_TOKEN }}

